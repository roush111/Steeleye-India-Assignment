(ANSWER 1).  Lists are used to display data in an ordered format and mainly used to display menus on websites. In React, Lists can be created in a similar way as we create lists in JavaScript. Let us see how we transform Lists in regular JavaScript. The map() function is used for traversing the lists. In the below example, the map() function takes an array of numbers and multiply their values with 5. We assign the new array returned by map() to the variable multiplyNums and log it. A “key” is a special string attribute you need to include when creating lists of elements in React. Keys are used in React to identify which items in the list are changed, updated, or deleted. In other words, we can say that keys are used to give an identity to the elements in the lists. In React, map() can be used to generate lists. Lists are used to display data in an ordered format and mainly used to display menus on websites. In React, Lists can be created in a similar way as we create lists in JavaScript. To provide a unique identity to each list element from lists. To remove the warning or error that react throw if the key is not used. It is used to identify which items have changed, updated, or deleted from the Lists.
 (ANSWER 2).  We receive some interesting problems every now and then but most of the asked questions are for common problems. This article provides detailed instructions for 15 common problems that a beginner React.js learner might make. 
a)  Not Starting a Component Name with a Capital Letter : A React component must have a name which starts with a capital letter. If the component name does not start with a capital letter, the component use will be treated as a built-in element such as a div or span.
b)  Using Single Quotes Instead of Back-ticks
Strings created with back-ticks (`…​`) are different from strings created with single quotes ('…​').
c)  Using React.PropTypes
The PropTypes object was removed from React. It used to be available as React.PropTypes but you cannot use that anymore. Instead, you need to Add the new prop-types package to your project: npm install prop-types Import it: import PropTypes from 'prop-types'.
d)  Not Using the Right Versions of What a Tutorial is Using When watching or reading content about coding and following up with the examples they present, make sure that you are using correct versions of the tools the content is using. Usually, using the latest version of each tool is a safe bet, but if the content is a bit old you might run into some deprecation issues. To be safe, stick with the major versions for the used tools. For example, if the tutorial is using React 16, don’t follow up using React 15. This is especially important for Node.js as well. You will face major problems if you use an older version of Node. For example, if you’re following along with some tutorial that uses Object.values and you are using Node 6.x, that method did not exist back then. You need Node 7.x or higher.
e)  Forgetting That Another App Instance is Still Using the Same Port: To run a web server, your need to use a host (like 127.0.0.1) and a port (like 8080) to make the server listen for request on a valid http address.Once the web server is running successfully, it has control over that port. You cannot use the same port for anything else. The port will be busy.
f) Not using parenthesis around the curly brackets makes JavaScript think you are starting a function scope. So Without wrapping the object in parentheses, you would not be using the arrow function short syntax at all. You will actually be defining a label for a string inside a regular arrow function block scope.
Wrapping the curly brackets in parenthesis is your hint to JavaScript that you do not want to start a function scope but rather return an object (within the arrow function short syntax).This is common inside the updater function of the setState method because it needs to return an object. You need to wrap that object with parenthesis if you want to use the short arrow function syntax.
